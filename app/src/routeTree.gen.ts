/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as NavigationPathlessLayoutRouteRouteImport } from './routes/_navigationPathlessLayout/route'
import { Route as NavigationPathlessLayoutIndexRouteImport } from './routes/_navigationPathlessLayout/index'
import { Route as NavigationPathlessLayoutCatalogueRouteImport } from './routes/_navigationPathlessLayout/catalogue'
import { Route as NavigationPathlessLayoutAddAVolumeRouteImport } from './routes/_navigationPathlessLayout/add-a-volume'
import { Route as NavigationPathlessLayoutAddAMangaRouteImport } from './routes/_navigationPathlessLayout/add-a-manga'
import { Route as NavigationPathlessLayoutAddAChapterRouteImport } from './routes/_navigationPathlessLayout/add-a-chapter'
import { Route as NavigationPathlessLayoutSerieSlugLayoutRouteImport } from './routes/_navigationPathlessLayout/$serieSlug/_layout'
import { Route as SerieSlugChapterNumberPageRouteImport } from './routes/$serieSlug.$chapterNumber.$page'
import { Route as NavigationPathlessLayoutSerieSlugLayoutVolumesRouteImport } from './routes/_navigationPathlessLayout/$serieSlug/_layout.volumes'
import { Route as NavigationPathlessLayoutSerieSlugLayoutFicheRouteImport } from './routes/_navigationPathlessLayout/$serieSlug/_layout.fiche'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc.$'

const NavigationPathlessLayoutSerieSlugRouteImport = createFileRoute(
  '/_navigationPathlessLayout/$serieSlug',
)()
const rootServerRouteImport = createServerRootRoute()

const NavigationPathlessLayoutRouteRoute =
  NavigationPathlessLayoutRouteRouteImport.update({
    id: '/_navigationPathlessLayout',
    getParentRoute: () => rootRouteImport,
  } as any)
const NavigationPathlessLayoutSerieSlugRoute =
  NavigationPathlessLayoutSerieSlugRouteImport.update({
    id: '/$serieSlug',
    path: '/$serieSlug',
    getParentRoute: () => NavigationPathlessLayoutRouteRoute,
  } as any)
const NavigationPathlessLayoutIndexRoute =
  NavigationPathlessLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => NavigationPathlessLayoutRouteRoute,
  } as any)
const NavigationPathlessLayoutCatalogueRoute =
  NavigationPathlessLayoutCatalogueRouteImport.update({
    id: '/catalogue',
    path: '/catalogue',
    getParentRoute: () => NavigationPathlessLayoutRouteRoute,
  } as any)
const NavigationPathlessLayoutAddAVolumeRoute =
  NavigationPathlessLayoutAddAVolumeRouteImport.update({
    id: '/add-a-volume',
    path: '/add-a-volume',
    getParentRoute: () => NavigationPathlessLayoutRouteRoute,
  } as any)
const NavigationPathlessLayoutAddAMangaRoute =
  NavigationPathlessLayoutAddAMangaRouteImport.update({
    id: '/add-a-manga',
    path: '/add-a-manga',
    getParentRoute: () => NavigationPathlessLayoutRouteRoute,
  } as any)
const NavigationPathlessLayoutAddAChapterRoute =
  NavigationPathlessLayoutAddAChapterRouteImport.update({
    id: '/add-a-chapter',
    path: '/add-a-chapter',
    getParentRoute: () => NavigationPathlessLayoutRouteRoute,
  } as any)
const NavigationPathlessLayoutSerieSlugLayoutRoute =
  NavigationPathlessLayoutSerieSlugLayoutRouteImport.update({
    id: '/_layout',
    getParentRoute: () => NavigationPathlessLayoutSerieSlugRoute,
  } as any)
const SerieSlugChapterNumberPageRoute =
  SerieSlugChapterNumberPageRouteImport.update({
    id: '/$serieSlug/$chapterNumber/$page',
    path: '/$serieSlug/$chapterNumber/$page',
    getParentRoute: () => rootRouteImport,
  } as any)
const NavigationPathlessLayoutSerieSlugLayoutVolumesRoute =
  NavigationPathlessLayoutSerieSlugLayoutVolumesRouteImport.update({
    id: '/volumes',
    path: '/volumes',
    getParentRoute: () => NavigationPathlessLayoutSerieSlugLayoutRoute,
  } as any)
const NavigationPathlessLayoutSerieSlugLayoutFicheRoute =
  NavigationPathlessLayoutSerieSlugLayoutFicheRouteImport.update({
    id: '/fiche',
    path: '/fiche',
    getParentRoute: () => NavigationPathlessLayoutSerieSlugLayoutRoute,
  } as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/add-a-chapter': typeof NavigationPathlessLayoutAddAChapterRoute
  '/add-a-manga': typeof NavigationPathlessLayoutAddAMangaRoute
  '/add-a-volume': typeof NavigationPathlessLayoutAddAVolumeRoute
  '/catalogue': typeof NavigationPathlessLayoutCatalogueRoute
  '/': typeof NavigationPathlessLayoutIndexRoute
  '/$serieSlug/$chapterNumber/$page': typeof SerieSlugChapterNumberPageRoute
  '/$serieSlug': typeof NavigationPathlessLayoutSerieSlugLayoutRouteWithChildren
  '/$serieSlug/fiche': typeof NavigationPathlessLayoutSerieSlugLayoutFicheRoute
  '/$serieSlug/volumes': typeof NavigationPathlessLayoutSerieSlugLayoutVolumesRoute
}
export interface FileRoutesByTo {
  '/add-a-chapter': typeof NavigationPathlessLayoutAddAChapterRoute
  '/add-a-manga': typeof NavigationPathlessLayoutAddAMangaRoute
  '/add-a-volume': typeof NavigationPathlessLayoutAddAVolumeRoute
  '/catalogue': typeof NavigationPathlessLayoutCatalogueRoute
  '/': typeof NavigationPathlessLayoutIndexRoute
  '/$serieSlug/$chapterNumber/$page': typeof SerieSlugChapterNumberPageRoute
  '/$serieSlug': typeof NavigationPathlessLayoutSerieSlugLayoutRouteWithChildren
  '/$serieSlug/fiche': typeof NavigationPathlessLayoutSerieSlugLayoutFicheRoute
  '/$serieSlug/volumes': typeof NavigationPathlessLayoutSerieSlugLayoutVolumesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_navigationPathlessLayout': typeof NavigationPathlessLayoutRouteRouteWithChildren
  '/_navigationPathlessLayout/add-a-chapter': typeof NavigationPathlessLayoutAddAChapterRoute
  '/_navigationPathlessLayout/add-a-manga': typeof NavigationPathlessLayoutAddAMangaRoute
  '/_navigationPathlessLayout/add-a-volume': typeof NavigationPathlessLayoutAddAVolumeRoute
  '/_navigationPathlessLayout/catalogue': typeof NavigationPathlessLayoutCatalogueRoute
  '/_navigationPathlessLayout/': typeof NavigationPathlessLayoutIndexRoute
  '/$serieSlug/$chapterNumber/$page': typeof SerieSlugChapterNumberPageRoute
  '/_navigationPathlessLayout/$serieSlug': typeof NavigationPathlessLayoutSerieSlugRouteWithChildren
  '/_navigationPathlessLayout/$serieSlug/_layout': typeof NavigationPathlessLayoutSerieSlugLayoutRouteWithChildren
  '/_navigationPathlessLayout/$serieSlug/_layout/fiche': typeof NavigationPathlessLayoutSerieSlugLayoutFicheRoute
  '/_navigationPathlessLayout/$serieSlug/_layout/volumes': typeof NavigationPathlessLayoutSerieSlugLayoutVolumesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/add-a-chapter'
    | '/add-a-manga'
    | '/add-a-volume'
    | '/catalogue'
    | '/'
    | '/$serieSlug/$chapterNumber/$page'
    | '/$serieSlug'
    | '/$serieSlug/fiche'
    | '/$serieSlug/volumes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/add-a-chapter'
    | '/add-a-manga'
    | '/add-a-volume'
    | '/catalogue'
    | '/'
    | '/$serieSlug/$chapterNumber/$page'
    | '/$serieSlug'
    | '/$serieSlug/fiche'
    | '/$serieSlug/volumes'
  id:
    | '__root__'
    | '/_navigationPathlessLayout'
    | '/_navigationPathlessLayout/add-a-chapter'
    | '/_navigationPathlessLayout/add-a-manga'
    | '/_navigationPathlessLayout/add-a-volume'
    | '/_navigationPathlessLayout/catalogue'
    | '/_navigationPathlessLayout/'
    | '/$serieSlug/$chapterNumber/$page'
    | '/_navigationPathlessLayout/$serieSlug'
    | '/_navigationPathlessLayout/$serieSlug/_layout'
    | '/_navigationPathlessLayout/$serieSlug/_layout/fiche'
    | '/_navigationPathlessLayout/$serieSlug/_layout/volumes'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  NavigationPathlessLayoutRouteRoute: typeof NavigationPathlessLayoutRouteRouteWithChildren
  SerieSlugChapterNumberPageRoute: typeof SerieSlugChapterNumberPageRoute
}
export interface FileServerRoutesByFullPath {
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/trpc/$'
  id: '__root__' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_navigationPathlessLayout': {
      id: '/_navigationPathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NavigationPathlessLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_navigationPathlessLayout/$serieSlug': {
      id: '/_navigationPathlessLayout/$serieSlug'
      path: '/$serieSlug'
      fullPath: '/$serieSlug'
      preLoaderRoute: typeof NavigationPathlessLayoutSerieSlugRouteImport
      parentRoute: typeof NavigationPathlessLayoutRouteRoute
    }
    '/_navigationPathlessLayout/': {
      id: '/_navigationPathlessLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof NavigationPathlessLayoutIndexRouteImport
      parentRoute: typeof NavigationPathlessLayoutRouteRoute
    }
    '/_navigationPathlessLayout/catalogue': {
      id: '/_navigationPathlessLayout/catalogue'
      path: '/catalogue'
      fullPath: '/catalogue'
      preLoaderRoute: typeof NavigationPathlessLayoutCatalogueRouteImport
      parentRoute: typeof NavigationPathlessLayoutRouteRoute
    }
    '/_navigationPathlessLayout/add-a-volume': {
      id: '/_navigationPathlessLayout/add-a-volume'
      path: '/add-a-volume'
      fullPath: '/add-a-volume'
      preLoaderRoute: typeof NavigationPathlessLayoutAddAVolumeRouteImport
      parentRoute: typeof NavigationPathlessLayoutRouteRoute
    }
    '/_navigationPathlessLayout/add-a-manga': {
      id: '/_navigationPathlessLayout/add-a-manga'
      path: '/add-a-manga'
      fullPath: '/add-a-manga'
      preLoaderRoute: typeof NavigationPathlessLayoutAddAMangaRouteImport
      parentRoute: typeof NavigationPathlessLayoutRouteRoute
    }
    '/_navigationPathlessLayout/add-a-chapter': {
      id: '/_navigationPathlessLayout/add-a-chapter'
      path: '/add-a-chapter'
      fullPath: '/add-a-chapter'
      preLoaderRoute: typeof NavigationPathlessLayoutAddAChapterRouteImport
      parentRoute: typeof NavigationPathlessLayoutRouteRoute
    }
    '/_navigationPathlessLayout/$serieSlug/_layout': {
      id: '/_navigationPathlessLayout/$serieSlug/_layout'
      path: '/$serieSlug'
      fullPath: '/$serieSlug'
      preLoaderRoute: typeof NavigationPathlessLayoutSerieSlugLayoutRouteImport
      parentRoute: typeof NavigationPathlessLayoutSerieSlugRoute
    }
    '/$serieSlug/$chapterNumber/$page': {
      id: '/$serieSlug/$chapterNumber/$page'
      path: '/$serieSlug/$chapterNumber/$page'
      fullPath: '/$serieSlug/$chapterNumber/$page'
      preLoaderRoute: typeof SerieSlugChapterNumberPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_navigationPathlessLayout/$serieSlug/_layout/volumes': {
      id: '/_navigationPathlessLayout/$serieSlug/_layout/volumes'
      path: '/volumes'
      fullPath: '/$serieSlug/volumes'
      preLoaderRoute: typeof NavigationPathlessLayoutSerieSlugLayoutVolumesRouteImport
      parentRoute: typeof NavigationPathlessLayoutSerieSlugLayoutRoute
    }
    '/_navigationPathlessLayout/$serieSlug/_layout/fiche': {
      id: '/_navigationPathlessLayout/$serieSlug/_layout/fiche'
      path: '/fiche'
      fullPath: '/$serieSlug/fiche'
      preLoaderRoute: typeof NavigationPathlessLayoutSerieSlugLayoutFicheRouteImport
      parentRoute: typeof NavigationPathlessLayoutSerieSlugLayoutRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface NavigationPathlessLayoutSerieSlugLayoutRouteChildren {
  NavigationPathlessLayoutSerieSlugLayoutFicheRoute: typeof NavigationPathlessLayoutSerieSlugLayoutFicheRoute
  NavigationPathlessLayoutSerieSlugLayoutVolumesRoute: typeof NavigationPathlessLayoutSerieSlugLayoutVolumesRoute
}

const NavigationPathlessLayoutSerieSlugLayoutRouteChildren: NavigationPathlessLayoutSerieSlugLayoutRouteChildren =
  {
    NavigationPathlessLayoutSerieSlugLayoutFicheRoute:
      NavigationPathlessLayoutSerieSlugLayoutFicheRoute,
    NavigationPathlessLayoutSerieSlugLayoutVolumesRoute:
      NavigationPathlessLayoutSerieSlugLayoutVolumesRoute,
  }

const NavigationPathlessLayoutSerieSlugLayoutRouteWithChildren =
  NavigationPathlessLayoutSerieSlugLayoutRoute._addFileChildren(
    NavigationPathlessLayoutSerieSlugLayoutRouteChildren,
  )

interface NavigationPathlessLayoutSerieSlugRouteChildren {
  NavigationPathlessLayoutSerieSlugLayoutRoute: typeof NavigationPathlessLayoutSerieSlugLayoutRouteWithChildren
}

const NavigationPathlessLayoutSerieSlugRouteChildren: NavigationPathlessLayoutSerieSlugRouteChildren =
  {
    NavigationPathlessLayoutSerieSlugLayoutRoute:
      NavigationPathlessLayoutSerieSlugLayoutRouteWithChildren,
  }

const NavigationPathlessLayoutSerieSlugRouteWithChildren =
  NavigationPathlessLayoutSerieSlugRoute._addFileChildren(
    NavigationPathlessLayoutSerieSlugRouteChildren,
  )

interface NavigationPathlessLayoutRouteRouteChildren {
  NavigationPathlessLayoutAddAChapterRoute: typeof NavigationPathlessLayoutAddAChapterRoute
  NavigationPathlessLayoutAddAMangaRoute: typeof NavigationPathlessLayoutAddAMangaRoute
  NavigationPathlessLayoutAddAVolumeRoute: typeof NavigationPathlessLayoutAddAVolumeRoute
  NavigationPathlessLayoutCatalogueRoute: typeof NavigationPathlessLayoutCatalogueRoute
  NavigationPathlessLayoutIndexRoute: typeof NavigationPathlessLayoutIndexRoute
  NavigationPathlessLayoutSerieSlugRoute: typeof NavigationPathlessLayoutSerieSlugRouteWithChildren
}

const NavigationPathlessLayoutRouteRouteChildren: NavigationPathlessLayoutRouteRouteChildren =
  {
    NavigationPathlessLayoutAddAChapterRoute:
      NavigationPathlessLayoutAddAChapterRoute,
    NavigationPathlessLayoutAddAMangaRoute:
      NavigationPathlessLayoutAddAMangaRoute,
    NavigationPathlessLayoutAddAVolumeRoute:
      NavigationPathlessLayoutAddAVolumeRoute,
    NavigationPathlessLayoutCatalogueRoute:
      NavigationPathlessLayoutCatalogueRoute,
    NavigationPathlessLayoutIndexRoute: NavigationPathlessLayoutIndexRoute,
    NavigationPathlessLayoutSerieSlugRoute:
      NavigationPathlessLayoutSerieSlugRouteWithChildren,
  }

const NavigationPathlessLayoutRouteRouteWithChildren =
  NavigationPathlessLayoutRouteRoute._addFileChildren(
    NavigationPathlessLayoutRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  NavigationPathlessLayoutRouteRoute:
    NavigationPathlessLayoutRouteRouteWithChildren,
  SerieSlugChapterNumberPageRoute: SerieSlugChapterNumberPageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
