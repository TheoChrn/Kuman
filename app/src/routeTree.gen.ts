/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AddAVolumeRouteImport } from './routes/add-a-volume'
import { Route as AddAMangaRouteImport } from './routes/add-a-manga'
import { Route as AddAChapterRouteImport } from './routes/add-a-chapter'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SerieChapterNumberPageRouteImport } from './routes/$serie.$chapterNumber.$page'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc.$'

const rootServerRouteImport = createServerRootRoute()

const AddAVolumeRoute = AddAVolumeRouteImport.update({
  id: '/add-a-volume',
  path: '/add-a-volume',
  getParentRoute: () => rootRouteImport,
} as any)
const AddAMangaRoute = AddAMangaRouteImport.update({
  id: '/add-a-manga',
  path: '/add-a-manga',
  getParentRoute: () => rootRouteImport,
} as any)
const AddAChapterRoute = AddAChapterRouteImport.update({
  id: '/add-a-chapter',
  path: '/add-a-chapter',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SerieChapterNumberPageRoute = SerieChapterNumberPageRouteImport.update({
  id: '/$serie/$chapterNumber/$page',
  path: '/$serie/$chapterNumber/$page',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add-a-chapter': typeof AddAChapterRoute
  '/add-a-manga': typeof AddAMangaRoute
  '/add-a-volume': typeof AddAVolumeRoute
  '/$serie/$chapterNumber/$page': typeof SerieChapterNumberPageRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add-a-chapter': typeof AddAChapterRoute
  '/add-a-manga': typeof AddAMangaRoute
  '/add-a-volume': typeof AddAVolumeRoute
  '/$serie/$chapterNumber/$page': typeof SerieChapterNumberPageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/add-a-chapter': typeof AddAChapterRoute
  '/add-a-manga': typeof AddAMangaRoute
  '/add-a-volume': typeof AddAVolumeRoute
  '/$serie/$chapterNumber/$page': typeof SerieChapterNumberPageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/add-a-chapter'
    | '/add-a-manga'
    | '/add-a-volume'
    | '/$serie/$chapterNumber/$page'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/add-a-chapter'
    | '/add-a-manga'
    | '/add-a-volume'
    | '/$serie/$chapterNumber/$page'
  id:
    | '__root__'
    | '/'
    | '/add-a-chapter'
    | '/add-a-manga'
    | '/add-a-volume'
    | '/$serie/$chapterNumber/$page'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddAChapterRoute: typeof AddAChapterRoute
  AddAMangaRoute: typeof AddAMangaRoute
  AddAVolumeRoute: typeof AddAVolumeRoute
  SerieChapterNumberPageRoute: typeof SerieChapterNumberPageRoute
}
export interface FileServerRoutesByFullPath {
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/trpc/$'
  id: '__root__' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/add-a-volume': {
      id: '/add-a-volume'
      path: '/add-a-volume'
      fullPath: '/add-a-volume'
      preLoaderRoute: typeof AddAVolumeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add-a-manga': {
      id: '/add-a-manga'
      path: '/add-a-manga'
      fullPath: '/add-a-manga'
      preLoaderRoute: typeof AddAMangaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add-a-chapter': {
      id: '/add-a-chapter'
      path: '/add-a-chapter'
      fullPath: '/add-a-chapter'
      preLoaderRoute: typeof AddAChapterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$serie/$chapterNumber/$page': {
      id: '/$serie/$chapterNumber/$page'
      path: '/$serie/$chapterNumber/$page'
      fullPath: '/$serie/$chapterNumber/$page'
      preLoaderRoute: typeof SerieChapterNumberPageRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddAChapterRoute: AddAChapterRoute,
  AddAMangaRoute: AddAMangaRoute,
  AddAVolumeRoute: AddAVolumeRoute,
  SerieChapterNumberPageRoute: SerieChapterNumberPageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
